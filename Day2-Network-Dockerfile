systemctl start docker
systemctl status docker
docker ps
docker rm -f $(docker ps -a -q)
netstat -tulpn | grep -i listen
docker run -d --name apache -p 80:80 quay.io/kushalsamota/httpd
netstat -tulpn | grep -i listen   == see the port and the process id
ps -ef | grep <processid from step7)
docker ps
curl localhost:80

docker network ls
docker network inspect bridge  === and see the range from which container are having the ip addresses
docker run -itd --name centos1 quay.io/kushalsamota/centos
docker run -itd --name centos2 quay.io/kushalsamota/centos
docker inspect centos1 | grep -i ip
docker inspect centos2 | grep -i ip
docker exec -it centos1 bash
ping <ip of centos2>
exit
docker rm -f centos1 centos2
docker rm -f apache

docker run -d --name nginx -p 82:80 quay.io/kushalsamota/nginx
netstat -tulpn | grep -i listen ===== and see which process is listening on 82 port number. you will also see the pid of process listening on 82. like 19742/82
ps -ef | grep pidofprocess
curl localhost:82
docker rm -f nginx

docker run -d -p 80:80 --name apache1 quay.io/kushalsamota/httpd
docker run -d -p 82:80 --name apache2 quay.io/kushalsamota/httpd
docker port --all === to see all port mappings.
docker rm -f apache1 apache2


===========================
Dockerfile
===========================
yum install vim -y
mkdir /apache
cd /apache
mkdir src
echo hello > src/index.html
touch Dockerfile
vim Dockerfile
FROM         docker.io/centos:centos7
RUN             yum install httpd -y
COPY           ./src      /var/www/html
CMD            ["/usr/sbin/httpd","-D","FOREGROUND"]

save the file
docker build -t apache:v1 .
docker run -d --name apachecontainer -p 80:80 apache:v1
curl localhost
docker rm -f apachecontainer
docker rmi apache:v1

#############################################
mkdir /apache2
cd /apache2
mkdir src
echo hello > src/index.html
touch Dockerfile
vim Dockerfile
FROM         docker.io/centos:centos7
MAINTAINER   kushalsamota kushalsamota@gmail.com
LABEL        runinformation docker run -d imagename
LABEL        info this is my testing image
ENV          PORT 8080
ENV          CITY udaipur
RUN             yum install httpd -y
COPY           ./src      /var/www/html
CMD            ["/usr/sbin/httpd","-D","FOREGROUND"]

save the file
docker build -t apache:v1 .
docker images
docker inspect apache:v1 === see the env label author
docker run -d --name apachecontainer -p 80:80 apache:v1
docker exec -it apachecontainer bash
env === see the env mentioned or not
exit
docker rm -f apachecontainer
docker run -d --name apachecontainer -e PORT=80 -p 80:80 apache:v1
docker exec -it apachecontainer bash
env === see the env mentioned or not
exit
curl localhost
docker rm -f apachecontainer
docker rmi apache:v1

###############################################

mkdir /apache3
cd /apache3
mkdir src
echo hello > src/index.html
touch Dockerfile
vim Dockerfile
FROM         docker.io/centos:centos7
MAINTAINER   kushalsamota kushalsamota@gmail.com
LABEL        runinformation docker run -d imagename
LABEL        info this is my testing image
ENV          PORT 8080
EXPOSE       80
RUN             yum install httpd -y
COPY           ./src      /var/www/html
CMD            ["/usr/sbin/httpd","-D","FOREGROUND"]

save the file
docker build -t apache:v1 .
docker images
docker inspect apache:v1 === see the label author cmd env and expose port
docker ps
docker run -d --name apachecontainer -p 80:80 apache:v1
curl localhost
docker rm -f apachecontainer
docker rmi apache:v1
##################################################
mkdir /apache4
cd /apache4
mkdir src
echo hello > src/index.html
touch Dockerfile
vim Dockerfile
FROM         docker.io/centos:centos7
MAINTAINER   kushalsamota kushalsamota@gmail.com
LABEL        runinformation docker run -d imagename
LABEL        info this is my testing image
ENV          PORT 80
EXPOSE       80
RUN             yum install httpd -y
WORKDIR         /var/www/html
COPY           ./src      /var/www/html
CMD            ["/usr/sbin/httpd","-D","FOREGROUND"]

save the file
docker build -t apache:v1 .
docker run -d --name apachecontainer -p 80:80 apache:v1
curl localhost
docker rm -f apachecontainer
docker rmi apache:v1
##################################################


Separate network exercise

task1)

docker network create idea
docker network create vodafone
docker network inspect idea
docket network inspect vodafone

See the network range. it will be different

docker run -itd --name idea --network idea docker.io/centos
docker run -itd --name vodafone --network vodafone docker.io/centos
docker inspect idea | grep -i ip
docker exec -it vodafone bash
ping <ip of idea container>

It should not ping

task2
docker rm -f $(docker ps -a -q)
docker ps  -- there should not be any container present
How to limit the usage of container on host machine

docker run -d --name apache docker.io/httpd
docker ps
docker stats apache
see the limit over there,, it can use all the memory and cpu of system. you can check by running "free -h" to see memory.

docker rm -f apache
docker run -d --name apache --cpu 100m --memory 100m docker.io/httpd
docker stats apache
see the limit over there, it will be changed

task3  -- to be done by yourself. this you have already done in previous exercise.

download a image named as mysql from dockerhub.
upload it on your docker account.

