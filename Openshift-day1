  Open putty and login to your linux labs
  
  yum install wget vim -y
  wget https://mirror.openshift.com/pub/openshift-v4/clients/ocp/stable/openshift-client-linux.tar.gz
  ls
  tar -xvf openshift-client-linux.tar.gz
  cp oc /usr/bin
  chmod +x /usr/bin/oc
  yum install bash-completion -y
  exec bash
  oc completion bash > /etc/bash_completion.d/oc
  exec bash
  oc login -u <usernumber> -p redhat https://api.testlab.mayankmodi.xyz:6443
  oc whoami   -- it must show you your username
  
 ===========================================
 
  oc new-project <usernumber>
  oc project
  
  
  usernumber is your user1 or user2 accordingly...
  
  
oc project <username of yours>
vim dep.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  labels:
    app: nginx
  namespace: <username of yours>
spec:
  replicas: 10
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: quay.io/kushalsamota/nginx:1.14
        ports:
        - containerPort: 80
        
oc create -f dep.yaml
oc get all
oc set image deployment nginx-deployment nginx=quay.io/kushalsamota/nginx:1.14 --record
oc rollout history deployment nginx-deployment
oc get all
oc set image deployment nginx-deployment nginx=quay.io/kushalsamota/nginx:1.15 --record
oc rollout history deployment nginx-deployment
oc get all
oc set image deployment nginx-deployment nginx=quay.io/kushalsamota/nginx:1.16 --record
oc rollout history deployment nginx-deployment

oc get all
oc set image deployment nginx-deployment nginx=quay.io/kushalsamota/nginx:1.17 --record
oc rollout history deployment nginx-deployment
oc get all
oc rollout undo deployment nginx-deployment --to-revision=2
oc rollout history deployment nginx-deployment

oc delete deployment nginx-deployment
oc get all  === nothing should be present
==========================================================

###############################################

secret practical
vim dep.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql-deployment
  namespace: <username of yours>
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: quay.io/kushalsamota/mysql
        env:
                - name: MYSQL_ROOT_PASSWORD
                  valueFrom:
                          secretKeyRef:
                                  name: mysqlpassword
                                  key: passwordofmysql
                                  
oc create secret generic mysqlpassword --from-literal=passwordofmysql=redhat 
oc create -f dep.yaml
oc describe deployment mysql-deployment
oc describe secret mysqlpassword
oc delete deployment mysql-deployment
oc delete secret mysqlpassword

#####################################
configmap
vim dep.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql-deployment
  namespace: <username of yours>
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: quay.io/kushalsamota/mysql
        env:
                - name: MYSQL_ROOT_PASSWORD
                  valueFrom:
                          configMapKeyRef:
                                  name: mysqlpassword
                                  key: passwordofmysql
 
 oc create configmap mysqlpassword --from-literal=passwordofmysql=redhat
 oc get configmap
 oc describe configmap mysqlpassword
 oc create -f dep.yaml
 oc describe deployment mysql-deployment
 oc delete deployment mysql-deployment
 oc delete configmap mysqlpassword
 ====================================================
 
 Task --- 
 1) create a deployment with following information in your project
      name of deployment - mysqldep
      password of ROOT - redhat@123
      replicas - 5
      podname - mysqlpod
      label on pod = app: mysql
      maxsurge = 50%
      maxunavailable = 50%
      image = docker.io/mysql
Once the pod is created - execute following
oc get pods
oc exec -it <any podname> bash
mysql -u root -p
press enter and type password and press enter
show databases;
select user,host from mysql.user;
exit   --- from the mysql shell
exit   --- from the container

delete deployment and check whether everything is deleted or not.
===========================================================
